ylab = "p-value",
names.arg = colnames(anova_result),
col = "skyblue",
ylim = c(0, 1))  # Setting y-axis limit from 0 to 1
# Extract p-values from ANOVA results
p_values <- anova_result$`Pr(>F)`  # Extracting p-values
# Create bar plot
barplot(p_values,
main = "ANOVA p-values",
ylab = "p-value",
names.arg = colnames(Mistletoes, Height, Species),
col = "skyblue",
ylim = c(0, 1))  # Setting y-axis limit from 0 to 1
# Names of variables
variables <- c("Mistletoes", "Height", "Species")
# Extract p-values from ANOVA results
p_values <- anova_result$`Pr(>F)`  # Extracting p-values
# Create bar plot
barplot(p_values,
main = "ANOVA p-values",
ylab = "p-value",
names.arg = variables,
col = "skyblue",
ylim = c(0, 1))  # Setting y-axis limit from 0 to 1
model <- lm(OldMethod ~ NewMethod, data = regression )
summary(model)
coefficients <- coef(model)
m <- coefficients["NewMethod"]
b <- coefficients["(Intercept)"]
r_squared <- summary(model)$r.squared
equation <- paste("y = ", round(m, 2), "x +", round(b,2), "; RÂ² = ", round(r_squared,2))
p  <- ggscatter(regression, x = "NewMethod", y = "OldMethod", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson", xlab = "New Method", ylab = "Old Method", main = "The Relationship between Methods on nitrogen content (mg/kg)") + annotate("text", x = Inf, y = Inf, label = equation, hjust = 1.1, vjust = 1.1, size = 4, color = "black")
p + theme(plot.title = element_text(hjust = 0.5, face = "bold"))
setwd("/Users/valenzuelajanaa/Library/Mobile Documents/com~apple~CloudDocs/Research Methods/Ordination")
library(vegan)
library(vegan)
data <- read.csv("FOOD_past_raw.csv", header = TRUE)
X <- data[, -1]
data <- apply(data, 2, as.numeric)
data <- data[, apply(data, 2, var) > 0]
data <- na.omit(data)
pca_result <- prcomp(data, scale. = TRUE)
data <- read.csv("FOOD_past_raw.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
dca_result <- decorana(data)
library(vegan)
data <- read.csv("FOOD_past_raw.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
dca_result <- decorana(data)
data <- read.csv("FOOD_past_raw.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
View(data)
View(data)
data <- read.csv("FOOD_past_raw.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
dca_result <- decorana(data)
data <- read.csv("FOOD_past_raw.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
dca_result <- decorana(data)
plot(dca_result, display = "sites", type = "n")  # This creates a blank plot with the correct dimensions
# Add points for each country
points(dca_result, display = "sites", pch = 20, col = "black")  # 'pch' sets the type of point
text(dca_result, cex = .5, pos = 3, display = "sites")  # Adds country names to the plot
plot(dca_result, display = "sites", type = "n")  # This creates a blank plot with the correct dimensions
# Add points for each country
points(dca_result, display = "sites", pch = 20, col = "black")  # 'pch' sets the type of point
text(dca_result, cex = .5, pos = 3, display = "sites")  # Adds country names to the plot
# Create an empty plot with the correct dimensions
plot(dca_result, display = "species", type = "n")
# Add points for each food item
points(dca_result, display = "species", pch = 20, col = "green")  # Green points
# Label each point with the food name
text(dca_result, display = "species", cex = 0.8, pos = 2, col = "darkgreen")
summary(dca_result)
# Perform PCA
pca_result <- rda(data)
plot(pca_result, display = "sites", type = "n")  # This creates a blank plot with the correct dimensions
# Add points for each country
points(pca_result, display = "sites", pch = 20, col = "black")  # 'pch' sets the type of point
text(pca_result, cex = .5, pos = 3, display = "sites")  # Adds country names to the plot
# Create an empty plot with the correct dimensions
plot(dca_result, display = "species", type = "n")
# Add points for each food item
points(dca_result, display = "species", pch = 20, col = "green")  # Green points
# Label each point with the food name
text(dca_result, display = "species", cex = 0.8, pos = 2, col = "darkgreen")
# Extract and print eigenvalues
eigenvalues <- pca_result$CA$eig
print("Eigenvalues:")
print(eigenvalues)
# Assuming PCA results can provide up to 17 PCs as indicated by eigenvalues
site_scores <- scores(pca_result, display = "sites", choices = 1:17)
species_scores <- scores(pca_result, display = "species", choices = 1:17)
print("Site Scores across PCs:")
print(site_scores)
print("Species Scores across PCs:")
print(species_scores)
data <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
data <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
# Perform PCA
pca_result <- rda(data)
data <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
View(data)
View(data)
data <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
data <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
data <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
# Perform PCA
pca_result <- rda(data)
data1 <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data <- data[,-1]  # Remove the country column from the data
# Perform PCA
pca_result <- rda(data1)
data1 <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data1 <- data[,-1]  # Remove the country column from the data
# Perform PCA
pca_result <- rda(data1)
data1 <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data1 <- data[,-1]  # Remove the country column from the data
# Perform PCA
pca_result <- rda(data1)
#plot PCA countries
plot(pca_result, display = "sites", type = "n")  # This creates a blank plot with the correct dimensions
# Add points for each country
points(pca_result, display = "sites", pch = 20, col = "black")  # 'pch' sets the type of point
text(pca_result, cex = .5, pos = 3, display = "sites")  # Adds country names to the plot
data1 <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data1 <- data[,-1]  # Remove the country column from the data
# Perform PCA
pca_result <- rda(data1)
#plot PCA countries
plot(pca_result, display = "sites", type = "n")  # This creates a blank plot with the correct dimensions
# Add points for each country
points(pca_result, display = "sites", pch = 20, col = "black")  # 'pch' sets the type of point
text(pca_result, cex = .5, pos = 3, display = "sites")  # Adds country names to the plot
# Create an empty plot with the correct dimensions
plot(dca_result, display = "species", type = "n")
# Add points for each food item
points(dca_result, display = "species", pch = 20, col = "green")  # Green points
# Label each point with the food name
text(dca_result, display = "species", cex = 0.8, pos = 2, col = "darkgreen")
data1 <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data1 <- data[,-1]  # Remove the country column from the data
# Perform PCA
pca_result <- rda(data1)
#plot PCA countries
plot(pca_result, display = "sites", type = "n")  # This creates a blank plot with the correct dimensions
# Add points for each country
points(pca_result, display = "sites", pch = 20, col = "black")  # 'pch' sets the type of point
text(pca_result, cex = .5, pos = 3, display = "countries")  # Adds country names to the plot
data1 <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data1 <- data[,-1]  # Remove the country column from the data
# Perform PCA
pca_result <- rda(data1)
#plot PCA countries
plot(pca_result, display = "sites", type = "n")  # This creates a blank plot with the correct dimensions
# Add points for each country
points(pca_result, display = "sites", pch = 20, col = "black")  # 'pch' sets the type of point
text(pca_result, cex = .5, pos = 3, display = "sites")  # Adds country names to the plot
# Create an empty plot with the correct dimensions
plot(dca_result, display = "species", type = "n")
# Add points for each food item
points(dca_result, display = "species", pch = 20, col = "green")  # Green points
# Label each point with the food name
text(dca_result, display = "species", cex = 0.8, pos = 2, col = "darkgreen")
data1 <- read.csv("FOOD_past_raw_CCA.csv", header = TRUE, sep = ",")
# Assuming 'country' is the first column and the rest are foods
rownames(data) <- data$country
data1 <- data[,-1]  # Remove the country column from the data
# Perform PCA
pca_result <- rda(data1)
#plot PCA countries
plot(pca_result, display = "sites", type = "n")  # This creates a blank plot with the correct dimensions
# Add points for each country
points(pca_result, display = "sites", pch = 20, col = "black")  # 'pch' sets the type of point
text(pca_result, cex = .5, pos = 3, display = "sites")  # Adds country names to the plot
# Create an empty plot with the correct dimensions
plot(dca_result, display = "species", type = "n")
# Add points for each food item
points(dca_result, display = "species", pch = 20, col = "green")  # Green points
# Label each point with the food name
text(dca_result, display = "species", cex = 0.8, pos = 2, col = "darkgreen")
setwd("/Volumes/Janaa/Bioinformatics/MicrobiomeSectionReport")
library(dada2)
library(Biostrings)
library(ShortRead)
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
library(devtools)
library(MicEco)
library(vegan)
load("RData/physeq.RData")
minTotRelAbun = .00005
x = taxa_sums(physeq)
keepTaxa = (x / sum(x)) > minTotRelAbun
physeqprune = prune_taxa(keepTaxa, physeq)
physeqprune
#create a venn diagram showing the different categories and what they share
bird=ps_venn(
physeqprune,
"bird",
fraction = .25,
weight = FALSE,
relative = TRUE,
plot = TRUE)
minTotRelAbun = .00005
x = taxa_sums(physeq)
keepTaxa = (x / sum(x)) > minTotRelAbun
physeqprune = prune_taxa(keepTaxa, physeq)
physeqprune
#create a venn diagram showing the different categories and what they share
bird=ps_venn(
physeqprune,
"bird",
fraction = .25,
weight = FALSE,
relative = TRUE,
plot = TRUE)
library(dada2)
library(Biostrings)
library(ShortRead)
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
library(devtools)
library(MicEco)
library(vegan)
path <- "sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
#extract file names
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
#place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(200,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
##learn error rates of forward and reverse reads
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
##learn error rates of forward and reverse reads
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
#place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(200,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
##learn error rates of forward and reverse reads
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
save(seqtab.nochim, file= "RData/seqtab.nochim.RData")
taxa <- assignTaxonomy(seqtab.nochim, "silva_nr99_v138.1_wSpecies_train_set.fa.gz", multithread=TRUE)
save(taxa, file = "RData/taxa.RData")
save(taxa, file = "RData/taxa.RData")
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata <- read.csv("sample-metadata.csv", header=TRUE, row.names = 1)
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE),
sample_data(metadata),
tax_table(taxa))
physeq
##this allows it to be easier to read, replaces the raw data
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq
#stictly use bacteria 16S rRNA,
physeq <- physeq %>% subset_taxa( Family!= "Mitochondria" | is.na(Family) & Order!="Chloroplast" | is.na(Order))
physeq
physeq<-rm_nonbac(physeq)
physeq
save(physeq, file= "RData/physeq.RData")
plot_bar(physeq, fill = "Phylum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="fill")
#convert to relative abundance
physeq_relabund <- transform_sample_counts(physeq, function(x) x / sum(x))
#barplot
plot_bar(physeq_relabund, fill = "Phylum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="fill") + facet_wrap(~population, scales= "free")
##can change based on the column name in metadata in facet_wrap(~columnName)
plot_richness(physeq, x="bird", color= "population", measures=c("Observed", "Simpson", "Shannon"))
##Simpson(less sensitive, will be more custered together) and Shannon(more sensitive to rare taxa) take into consideration relative abundance each species.
plot_richness(physeq, x="sex", color= "bird", measures=c("Observed", "Simpson", "Shannon"))
##Simpson(less sensitive, will be more custered together) and Shannon(more sensitive to rare taxa) take into consideration relative abundance each species.
minTotRelAbun = .00005
x = taxa_sums(physeq)
keepTaxa = (x / sum(x)) > minTotRelAbun
physeqprune = prune_taxa(keepTaxa, physeq)
physeqprune
#create a venn diagram showing the different categories and what they share
bird=ps_venn(
physeqprune,
"bird",
fraction = .25,
weight = FALSE,
relative = TRUE,
plot = TRUE)
#create a venn diagram showing the different categories and what they share
population=ps_venn(
physeqprune,
"population",
fraction = .25,
weight = FALSE,
relative = TRUE,
plot = TRUE)
population
set.seed(666)
dist = phyloseq::distance(physeqprune, method="bray", weighted=TRUE)
ordination = ordinate(physeqprune, method="NMDS", distance=dist)
plot_richness(physeq, x="flock", color= "bird", measures=c("Observed", "Simpson", "Shannon"))
##Simpson(less sensitive, will be more custered together) and Shannon(more sensitive to rare taxa) take into consideration relative abundance each species.
#create a venn diagram showing the different categories and what they share
flock=ps_venn(
physeqprune,
"flock",
fraction = .25,
weight = FALSE,
relative = TRUE,
plot = TRUE)
flock
set.seed(666)
dist = phyloseq::distance(physeqprune, method="bray", weighted=TRUE)
ordination = ordinate(physeqprune, method="NMDS", distance=dist)
braysubject=plot_ordination(physeqprune, ordination, color="population") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=subject))
braysubject
braysubject=plot_ordination(physeqprune, ordination, color="population") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=subject))
braypopulation
braypopulation=plot_ordination(physeqprune, ordination, color="population") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=subject))
braypopulation
braypopulation=plot_ordination(physeqprune, ordination, color="population") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=population))
braypopulation
braybird=plot_ordination(physeqprune, ordination, color="bird") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=bird))
braybird
brayflock=plot_ordination(physeqprune, ordination, color="flock") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=flock))
brayflock
#population
adonis2(dist ~ sample_data(physeqprune)$population)
#flock
#bray curits subject statistics
adonis2(dist ~ sample_data(physeqprune)$flock)
#population
adonis2(dist ~ sample_data(physeqprune)$population)
ps.disper<-betadisper(dist, sample_data(physeqprune)$population) permutest(ps.disper, pair=TRUE)
#population
adonis2(dist ~ sample_data(physeqprune)$population)
ps.disper <-betadisper(dist, sample_data(physeqprune)$population) permutest(ps.disper, pair=TRUE)
#population
adonis2(dist ~ sample_data(physeqprune)$population)
ps.disper <-betadisper(dist, sample_data(physeqprune)$population)
permutest(ps.disper, pair=TRUE)
#flock
adonis2(dist ~ sample_data(physeqprune)$flock)
ps.disper<-betadisper(dist, sample_data(physeqprune)$flock) permutest(ps.disper, pair=TRUE)
#population
adonis2(dist ~ sample_data(physeqprune)$population)
ps.disper <-betadisper(dist, sample_data(physeqprune)$population)
permutest(ps.disper, pair=TRUE)
#flock
adonis2(dist ~ sample_data(physeqprune)$flock)
ps.disper<-betadisper(dist, sample_data(physeqprune)$flock)
permutest(ps.disper, pair=TRUE)
View(dca_result)
braysex=plot_ordination(physeqprune, ordination, color="sex") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=sex))
braysex
#flock
adonis2(dist ~ sample_data(physeqprune)$flock)
ps.disper<-betadisper(dist, sample_data(physeqprune)$flock)
permutest(ps.disper, pair=TRUE)
#flock
adonis2(dist ~ sample_data(physeqprune)$flock)
ps.disper<-betadisper(dist, sample_data(physeqprune)$flock)
permutest(ps.disper, pair=TRUE)
#population
adonis2(dist ~ sample_data(physeqprune)$population)
ps.disper <-betadisper(dist, sample_data(physeqprune)$population)
permutest(ps.disper, pair=TRUE)
brayflock=plot_ordination(physeqprune, ordination, color="flock") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=flock))
brayflock
braysex=plot_ordination(physeqprune, ordination, color="sex") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=sex))
braysex
braypopulation=plot_ordination(physeqprune, ordination, color="population") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=population))
braypopulation
set.seed(666)
dist = phyloseq::distance(physeqprune, method="bray", weighted=TRUE)
ordination = ordinate(physeqprune, method="NMDS", distance=dist)
plot_richness(physeq, x="population", color= "bird", measures=c("Observed", "Simpson", "Shannon"))
##Simpson(less sensitive, will be more custered together) and Shannon(more sensitive to rare taxa) take into consideration relative abundance each species.
plot_richness(physeq, x="population", color= "sex", measures=c("Observed", "Simpson", "Shannon"))
##Simpson(less sensitive, will be more custered together) and Shannon(more sensitive to rare taxa) take into consideration relative abundance each species.
plot_richness(physeq, x="sex", color= "flock", measures=c("Observed", "Simpson", "Shannon"))
##Simpson(less sensitive, will be more custered together) and Shannon(more sensitive to rare taxa) take into consideration relative abundance each species.
plot_richness(physeq, x="flock", color= "sex", measures=c("Observed", "Simpson", "Shannon"))
##Simpson(less sensitive, will be more custered together) and Shannon(more sensitive to rare taxa) take into consideration relative abundance each species.
plot_richness(physeq, x="sex", color= "population", measures=c("Observed", "Simpson", "Shannon"))
##Simpson(less sensitive, will be more custered together) and Shannon(more sensitive to rare taxa) take into consideration relative abundance each species.
alpha <- estimate_richness(physeq, measures=c("Observed", "Simpson", "Shannon")) #alternative = the data is normal distributed
#null = the data is not normal distributed
#Shapiro-wilk - used when it has fewer than 50 samples
observed <- shapiro.test(alpha$Observed) shannon <- shapiro.test(alpha$Shannon) simpson <- shapiro.test(alpha$Simpson)
alpha <- estimate_richness(physeq, measures=c("Observed", "Simpson", "Shannon")) #alternative = the data is normal distributed
#null = the data is not normal distributed
#Shapiro-wilk - used when it has fewer than 50 samples
observed <- shapiro.test(alpha$Observed)
shannon <- shapiro.test(alpha$Shannon)
simpson <- shapiro.test(alpha$Simpson)
#print
print(observed)
alpha <- estimate_richness(physeq, measures=c("Observed", "Simpson", "Shannon")) #alternative = the data is normal distributed
#null = the data is not normal distributed
#Shapiro-wilk - used when it has fewer than 50 samples
observed <- shapiro.test(alpha$Observed)
shannon <- shapiro.test(alpha$Shannon)
simpson <- shapiro.test(alpha$Simpson)
#print
print(observed)
#population
adonis2(dist ~ sample_data(physeqprune)$population)
ps.disper <-betadisper(dist, sample_data(physeqprune)$population)
permutest(ps.disper, pair=TRUE)
#flock
adonis2(dist ~ sample_data(physeqprune)$flock)
ps.disper<-betadisper(dist, sample_data(physeqprune)$flock)
permutest(ps.disper, pair=TRUE)
#flock
adonis2(dist ~ sample_data(physeqprune)$flock)
ps.disper<-betadisper(dist, sample_data(physeqprune)$flock)
permutest(ps.disper, pair=TRUE)
